// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/leaderboard/domain/repository/leaderboard_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	model "leaderboard/internal/leaderboard/domain/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockLeaderBoardRepository is a mock of LeaderBoardRepository interface.
type MockLeaderBoardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderBoardRepositoryMockRecorder
}

// MockLeaderBoardRepositoryMockRecorder is the mock recorder for MockLeaderBoardRepository.
type MockLeaderBoardRepositoryMockRecorder struct {
	mock *MockLeaderBoardRepository
}

// NewMockLeaderBoardRepository creates a new mock instance.
func NewMockLeaderBoardRepository(ctrl *gomock.Controller) *MockLeaderBoardRepository {
	mock := &MockLeaderBoardRepository{ctrl: ctrl}
	mock.recorder = &MockLeaderBoardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderBoardRepository) EXPECT() *MockLeaderBoardRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLeaderBoardRepository) Create(ctx context.Context, key string, score *model.Score) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, key, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLeaderBoardRepositoryMockRecorder) Create(ctx, key, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLeaderBoardRepository)(nil).Create), ctx, key, score)
}

// DeleteAll mocks base method.
func (m *MockLeaderBoardRepository) DeleteAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockLeaderBoardRepositoryMockRecorder) DeleteAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockLeaderBoardRepository)(nil).DeleteAll), ctx)
}

// Exists mocks base method.
func (m *MockLeaderBoardRepository) Exists(ctx context.Context, key string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockLeaderBoardRepositoryMockRecorder) Exists(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockLeaderBoardRepository)(nil).Exists), ctx, key)
}

// List mocks base method.
func (m *MockLeaderBoardRepository) List(ctx context.Context, key string, offset, limit int64) ([]*model.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, key, offset, limit)
	ret0, _ := ret[0].([]*model.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLeaderBoardRepositoryMockRecorder) List(ctx, key, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLeaderBoardRepository)(nil).List), ctx, key, offset, limit)
}

// SetExpire mocks base method.
func (m *MockLeaderBoardRepository) SetExpire(ctx context.Context, key string, t time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpire", ctx, key, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpire indicates an expected call of SetExpire.
func (mr *MockLeaderBoardRepositoryMockRecorder) SetExpire(ctx, key, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpire", reflect.TypeOf((*MockLeaderBoardRepository)(nil).SetExpire), ctx, key, t)
}