// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/leaderboard/usecase/score/interface.go

// Package socre is a generated GoMock package.
package socre

import (
	context "context"
	model "leaderboard/internal/leaderboard/domain/model"
	score "leaderboard/internal/leaderboard/usecase/score"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScoreUsecase is a mock of ScoreUsecase interface.
type MockScoreUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockScoreUsecaseMockRecorder
}

// MockScoreUsecaseMockRecorder is the mock recorder for MockScoreUsecase.
type MockScoreUsecaseMockRecorder struct {
	mock *MockScoreUsecase
}

// NewMockScoreUsecase creates a new mock instance.
func NewMockScoreUsecase(ctrl *gomock.Controller) *MockScoreUsecase {
	mock := &MockScoreUsecase{ctrl: ctrl}
	mock.recorder = &MockScoreUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreUsecase) EXPECT() *MockScoreUsecaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockScoreUsecase) Add(ctx context.Context, command *score.AddScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockScoreUsecaseMockRecorder) Add(ctx, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockScoreUsecase)(nil).Add), ctx, command)
}

// AddIgnoreDuplicate mocks base method.
func (m *MockScoreUsecase) AddIgnoreDuplicate(ctx context.Context, command *score.AddScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIgnoreDuplicate", ctx, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIgnoreDuplicate indicates an expected call of AddIgnoreDuplicate.
func (mr *MockScoreUsecaseMockRecorder) AddIgnoreDuplicate(ctx, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIgnoreDuplicate", reflect.TypeOf((*MockScoreUsecase)(nil).AddIgnoreDuplicate), ctx, command)
}

// GetLeaderBoard mocks base method.
func (m *MockScoreUsecase) GetLeaderBoard(ctx context.Context) ([]*model.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderBoard", ctx)
	ret0, _ := ret[0].([]*model.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaderBoard indicates an expected call of GetLeaderBoard.
func (mr *MockScoreUsecaseMockRecorder) GetLeaderBoard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderBoard", reflect.TypeOf((*MockScoreUsecase)(nil).GetLeaderBoard), ctx)
}

// ResetLeaderBoard mocks base method.
func (m *MockScoreUsecase) ResetLeaderBoard(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLeaderBoard", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetLeaderBoard indicates an expected call of ResetLeaderBoard.
func (mr *MockScoreUsecaseMockRecorder) ResetLeaderBoard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLeaderBoard", reflect.TypeOf((*MockScoreUsecase)(nil).ResetLeaderBoard), ctx)
}